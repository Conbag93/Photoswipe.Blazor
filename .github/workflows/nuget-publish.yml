name: NuGet Package CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'PhotoSwipe.Blazor/PhotoSwipe.Blazor.csproj'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for versionize to work properly

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install npm dependencies
      run: |
        cd PhotoSwipe.Blazor
        npm install

    - name: Build PhotoSwipe assets
      run: |
        cd PhotoSwipe.Blazor
        npm run build

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build project
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

    # Tests removed for now - can be added back later when configured properly

  version-and-release:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install versionize
      run: dotnet tool install --global Versionize

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Run versionize
      id: versionize
      run: |
        if versionize --dry-run --skip-dirty; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
          versionize --skip-dirty
          echo "new_version=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "No version changes detected"
        fi

    - name: Push changes and tags
      if: steps.versionize.outputs.has_changes == 'true'
      run: |
        git push --follow-tags origin main

    - name: Install npm dependencies
      if: steps.versionize.outputs.has_changes == 'true'
      run: |
        cd PhotoSwipe.Blazor
        npm install

    - name: Build PhotoSwipe assets
      if: steps.versionize.outputs.has_changes == 'true'
      run: |
        cd PhotoSwipe.Blazor
        npm run build

    - name: Build project
      if: steps.versionize.outputs.has_changes == 'true'
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release

    - name: Create NuGet package
      if: steps.versionize.outputs.has_changes == 'true'
      run: dotnet pack ${{ env.PROJECT_PATH }} --configuration Release --no-build --output ./nupkg

    - name: Publish to GitHub Packages
      if: steps.versionize.outputs.has_changes == 'true'
      run: |
        dotnet nuget push ./nupkg/*.nupkg \
          --api-key ${{ secrets.GITHUB_TOKEN }} \
          --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json \
          --skip-duplicate

    - name: Publish to NuGet.org
      if: steps.versionize.outputs.has_changes == 'true'
      env:
        NUGET_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        if [ -n "$NUGET_KEY" ]; then
          dotnet nuget push ./nupkg/*.nupkg \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
        else
          echo "NuGet API key not configured - skipping NuGet.org publish"
        fi

    - name: Create GitHub Release
      id: create_release
      if: steps.versionize.outputs.has_changes == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.versionize.outputs.new_version }}
        release_name: Release ${{ steps.versionize.outputs.new_version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false

    - name: Upload NuGet package to release
      if: steps.versionize.outputs.has_changes == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./nupkg/PhotoSwipe.Blazor.${{ steps.versionize.outputs.new_version }}.nupkg
        asset_name: PhotoSwipe.Blazor.${{ steps.versionize.outputs.new_version }}.nupkg
        asset_content_type: application/zip