name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
jobs:
  test:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Cache .NET packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          PhotoSwipe.Blazor/package-lock.json
          tests/package-lock.json

    - name: Get Playwright version
      working-directory: ./tests
      run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').dependencies['@playwright/test'].version)")" >> $GITHUB_ENV

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    - name: Install npm dependencies (PhotoSwipe.Blazor)
      working-directory: ./PhotoSwipe.Blazor
      run: |
        npm ci
        npm run build

    - name: Install Playwright dependencies and browsers
      working-directory: ./tests
      run: |
        npm ci
        npx playwright install --with-deps
      if: steps.playwright-cache.outputs.cache-hit != 'true'

    - name: Install Playwright system dependencies (cache hit)
      working-directory: ./tests
      run: npx playwright install-deps
      if: steps.playwright-cache.outputs.cache-hit == 'true'

    - name: Start PhotoSwipe Sample App
      run: |
        cd PhotoSwipe.Sample
        dotnet publish -c Release -o ./publish
        cd ./publish
        ASPNETCORE_ENVIRONMENT=Development dotnet PhotoSwipe.Sample.dll --urls http://localhost:5224 &
        echo "Waiting for server to start..."
        timeout 30 bash -c 'until curl --silent --fail http://localhost:5224 > /dev/null 2>&1; do sleep 1; done'
        echo "Server is ready!"

    - name: Run Playwright tests
      working-directory: ./tests
      timeout-minutes: 15
      run: npx playwright test --reporter=html,list --output playwright-report
      env:
        # Increase individual test timeout for CI environment
        PLAYWRIGHT_TEST_TIMEOUT: 60000

    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: tests/playwright-report/
        retention-days: 30

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-traces
        path: tests/test-results/
        retention-days: 7