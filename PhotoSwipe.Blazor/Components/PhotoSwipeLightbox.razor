@using PhotoSwipe.Blazor.Models
@using PhotoSwipe.Blazor.Services
@implements IAsyncDisposable
@inject IJSRuntime JS

@if (Items != null && Items.Any())
{
    <div>
        @foreach (var (item, index) in Items.Select((item, index) => (item, index)))
        {
            @if (TriggerTemplate != null)
            {
                <div @onclick="() => OpenLightboxAsync(index)">
                    @TriggerTemplate(item)
                </div>
            }
            else
            {
                <button type="button" @onclick="() => OpenLightboxAsync(index)" class="photoswipe-trigger">
                    <img src="@(item.ThumbnailUrl ?? item.Src)" alt="@item.Alt" class="@item.ThumbnailClass" />
                </button>
            }
        }
    </div>
}

@code {
    [Parameter] public IEnumerable<PhotoSwipeItem>? Items { get; set; }
    [Parameter] public PhotoSwipeOptions? Options { get; set; }
    [Parameter] public RenderFragment<PhotoSwipeItem>? TriggerTemplate { get; set; }
    
    [Parameter] public EventCallback<PhotoSwipeEventArgs> OnOpen { get; set; }
    [Parameter] public EventCallback<PhotoSwipeEventArgs> OnClose { get; set; }
    [Parameter] public EventCallback<PhotoSwipeEventArgs> OnChange { get; set; }

    private PhotoSwipeInterop? _interop;

    protected override void OnInitialized()
    {
        _interop = new PhotoSwipeInterop(JS);
    }

    public async Task OpenLightboxAsync(int index = 0)
    {
        if (_interop == null || Items == null || !Items.Any()) return;

        try
        {
            // Generate unique instance ID for each open operation
            var instanceId = $"photoswipe-data-{Guid.NewGuid():N}";

            // Set up event handlers before creating the instance
            if (OnOpen.HasDelegate)
            {
                await _interop.AddEventHandlerAsync(instanceId, "openPswp", OnOpen);
            }
            
            if (OnClose.HasDelegate)
            {
                await _interop.AddEventHandlerAsync(instanceId, "closePswp", OnClose);
            }
            
            if (OnChange.HasDelegate)
            {
                await _interop.AddEventHandlerAsync(instanceId, "change", OnChange);
            }

            // Create and open PhotoSwipe instance using data-based approach
            await _interop.CreateFromDataAsync(instanceId, Items, Options, index);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error opening PhotoSwipe lightbox: {ex.Message}");
        }
    }

    public async Task UpdateOptionsAsync(PhotoSwipeOptions options)
    {
        // Update options for future opens
        Options = options;
        await Task.CompletedTask;
    }

    public async ValueTask DisposeAsync()
    {
        // PhotoSwipeLightbox uses on-demand instances that are cleaned up automatically
        // No persistent instance to destroy
        
        if (_interop != null)
        {
            await _interop.DisposeAsync();
        }
    }
}