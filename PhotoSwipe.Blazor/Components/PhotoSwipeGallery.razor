@using PhotoSwipe.Blazor.Models
@using PhotoSwipe.Blazor.Services
@using Microsoft.Extensions.Logging
@using PhotoSwipe.Blazor.Components
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject ILogger<PhotoSwipeGallery> Logger
@inject ILogger<PhotoSwipeInterop> InteropLogger

<div id="@ElementId" class="photoswipe-gallery @CssClass">
    @if (ItemTemplate != null && Items != null)
    {
        int itemIndex = 0;
        var displayItems = GetDisplayItems();
        var displayItemsList = displayItems.ToList();

        @foreach (var item in displayItemsList)
        {
            var isLastItem = itemIndex == displayItemsList.Count - 1;
            var shouldShowOverlay = LoadMoreMode == LoadMoreMode.OverlayOnLastItem && ShouldShowLoadMore() && isLastItem;

            <a href="@item.Src"
               data-pswp-width="@item.Width"
               data-pswp-height="@item.Height"
               data-caption="@item.Caption"
               data-pswp-srcset="@item.SrcSet"
               data-enhance-nav="false"
               class="photoswipe-item @GetGridItemClass(item) @(shouldShowOverlay ? "has-load-more-overlay" : "")"
               style="@GetGridItemStyle(item, itemIndex)">
                @ItemTemplate(item)
                @if (shouldShowOverlay)
                {
                    <div class="load-more-overlay-wrapper"
                         data-pswp-prevent-gallery="true"
                         @onclick="HandleLoadMore"
                         @onclick:preventDefault="true"
                         @onclick:stopPropagation="true">
                        <div class="load-more-overlay-backdrop"></div>
                        <div class="load-more-overlay-content">
                            @if (LoadMoreTemplate != null)
                            {
                                @LoadMoreTemplate
                            }
                            else
                            {
                                <div class="load-more-overlay-default">
                                    <span class="load-more-overlay-icon">‚äï</span>
                                    <span class="load-more-overlay-text">@GetRemainingItemsCount() more</span>
                                </div>
                            }
                        </div>
                    </div>
                }
            </a>
            itemIndex++;
        }

        @if (LoadMoreMode == LoadMoreMode.SeparateItem && ShouldShowLoadMore())
        {
            <div class="photoswipe-load-more-item" @onclick="HandleLoadMore">
                @if (LoadMoreTemplate != null)
                {
                    @LoadMoreTemplate
                }
                else
                {
                    <div class="load-more-default">
                        <span class="load-more-icon">+</span>
                        <span class="load-more-text">Load @GetRemainingItemsCount() more</span>
                    </div>
                }
            </div>
        }
    }
    else if (Items != null)
    {
        int itemIndex = 0;
        var displayItems = GetDisplayItems();
        var displayItemsList = displayItems.ToList();

        @foreach (var item in displayItemsList)
        {
            var isLastItem = itemIndex == displayItemsList.Count - 1;
            var shouldShowOverlay = LoadMoreMode == LoadMoreMode.OverlayOnLastItem && ShouldShowLoadMore() && isLastItem;

            <a href="@item.Src"
               data-pswp-width="@item.Width"
               data-pswp-height="@item.Height"
               data-caption="@item.Caption"
               data-pswp-srcset="@item.SrcSet"
               data-enhance-nav="false"
               class="photoswipe-item @GetGridItemClass(item) @(shouldShowOverlay ? "has-load-more-overlay" : "")"
               style="@GetGridItemStyle(item, itemIndex)">
                <img src="@(item.ThumbnailUrl ?? item.Src)"
                     alt="@item.Alt"
                     class="@item.ThumbnailClass" />
                @if (!string.IsNullOrEmpty(item.Label))
                {
                    <span class="photoswipe-item-label @GetLabelPositionClass(item.LabelPosition) @item.LabelCssClass"
                          style="@item.LabelStyle">
                        @item.Label
                    </span>
                }
                @if (shouldShowOverlay)
                {
                    <div class="load-more-overlay-wrapper"
                         data-pswp-prevent-gallery="true"
                         @onclick="HandleLoadMore"
                         @onclick:preventDefault="true"
                         @onclick:stopPropagation="true">
                        <div class="load-more-overlay-backdrop"></div>
                        <div class="load-more-overlay-content">
                            @if (LoadMoreTemplate != null)
                            {
                                @LoadMoreTemplate
                            }
                            else
                            {
                                <div class="load-more-overlay-default">
                                    <span class="load-more-overlay-icon">‚äï</span>
                                    <span class="load-more-overlay-text">@GetRemainingItemsCount() more</span>
                                </div>
                            }
                        </div>
                    </div>
                }
            </a>
            itemIndex++;
        }

        @if (LoadMoreMode == LoadMoreMode.SeparateItem && ShouldShowLoadMore())
        {
            <div class="photoswipe-load-more-item" @onclick="HandleLoadMore">
                @if (LoadMoreTemplate != null)
                {
                    @LoadMoreTemplate
                }
                else
                {
                    <div class="load-more-default">
                        <span class="load-more-icon">+</span>
                        <span class="load-more-text">Load @GetRemainingItemsCount() more</span>
                    </div>
                }
            </div>
        }
    }
    else
    {
        @ChildContent
    }
</div>

@code {
    [Parameter] public string? Id { get; set; }
    [Parameter] public string? CssClass { get; set; }
    [Parameter] public IEnumerable<PhotoSwipeItem>? Items { get; set; }
    [Parameter] public PhotoSwipeOptions? Options { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment<PhotoSwipeItem>? ItemTemplate { get; set; }
    
    [Parameter] public EventCallback<PhotoSwipeEventArgs> OnOpen { get; set; }
    [Parameter] public EventCallback<PhotoSwipeEventArgs> OnClose { get; set; }
    [Parameter] public EventCallback<PhotoSwipeEventArgs> OnChange { get; set; }

    // Load More Parameters
    [Parameter] public int? ItemLimit { get; set; }
    [Parameter] public int LoadMoreIncrement { get; set; } = 10;
    [Parameter] public LoadMoreMode LoadMoreMode { get; set; } = LoadMoreMode.SeparateItem;
    [Parameter] public RenderFragment? LoadMoreTemplate { get; set; }
    [Parameter] public EventCallback OnLoadMore { get; set; }

    public string ElementId { get; private set; } = string.Empty;
    private PhotoSwipeInterop? _interop;
    private string? _instanceId;
    private IEnumerable<PhotoSwipeItem>? _previousItems;
    private int _currentDisplayLimit;

    protected override void OnInitialized()
    {
        ElementId = Id ?? $"photoswipe-{Guid.NewGuid():N}";
        _interop = new PhotoSwipeInterop(JS, InteropLogger);
        _currentDisplayLimit = ItemLimit ?? int.MaxValue;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogDebug("üîÑ OnAfterRenderAsync called for {ElementId}, firstRender: {FirstRender}, interop: {HasInterop}", ElementId, firstRender, _interop != null);
        
        if (firstRender && _interop != null)
        {
            try
            {
                Logger.LogInformation("üöÄ Initializing PhotoSwipe for element {ElementId}", ElementId);
                _instanceId = await _interop.InitializeLightboxAsync(ElementId, Options);
                Logger.LogInformation("‚úÖ PhotoSwipe initialized with instance ID: {InstanceId}", _instanceId);
                
                // Add event handlers if delegates are present
                if (OnOpen.HasDelegate)
                {
                    await _interop.AddEventHandlerAsync(_instanceId, "openPswp", OnOpen);
                    Logger.LogDebug("üì° Added OnOpen event handler");
                }
                
                if (OnClose.HasDelegate)
                {
                    await _interop.AddEventHandlerAsync(_instanceId, "closePswp", OnClose);
                    Logger.LogDebug("üì° Added OnClose event handler");
                }
                
                if (OnChange.HasDelegate)
                {
                    await _interop.AddEventHandlerAsync(_instanceId, "change", OnChange);
                    Logger.LogDebug("üì° Added OnChange event handler");
                }

                _previousItems = Items;
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "‚ùå Error in OnAfterRenderAsync for {ElementId}: {Error}", ElementId, ex.Message);
            }
        }
        else if (!firstRender && _interop != null && _instanceId != null)
        {
            // Check if Items collection has changed
            if (HasItemsChanged())
            {
                try
                {
                    Logger.LogInformation("üîÑ Items collection changed, refreshing PhotoSwipe for {ElementId}", ElementId);
                    await _interop.RefreshGalleryAsync(_instanceId);
                    _previousItems = Items;
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "‚ùå Error refreshing PhotoSwipe for {ElementId}: {Error}", ElementId, ex.Message);
                }
            }
        }
    }

    public async Task OpenAsync(int index = 0)
    {
        if (_interop != null && _instanceId != null)
        {
            await _interop.OpenGalleryAsync(_instanceId, index);
        }
    }

    public async Task UpdateOptionsAsync(PhotoSwipeOptions options)
    {
        if (_interop != null && _instanceId != null)
        {
            await _interop.UpdateOptionsAsync(_instanceId, options);
        }
    }

    public async Task RefreshAsync()
    {
        if (_interop != null && _instanceId != null)
        {
            await _interop.RefreshGalleryAsync(_instanceId);
            _previousItems = Items;
        }
    }


    private bool HasItemsChanged()
    {
        if (Items == null && _previousItems == null)
            return false;

        if (Items == null || _previousItems == null)
            return true;

        // For dynamic collections (like Lists), compare count and sequence
        var currentItems = Items.ToList();
        var previousItems = _previousItems.ToList();

        if (currentItems.Count != previousItems.Count)
            return true;

        // Compare item sources (basic change detection)
        return !currentItems.Select(i => i.Src).SequenceEqual(previousItems.Select(i => i.Src));
    }

    private string GetGridItemClass(PhotoSwipeItem item)
    {
        var classes = new List<string>();

        // Add custom grid item class if specified
        if (!string.IsNullOrEmpty(item.GridItemClass))
        {
            classes.Add(item.GridItemClass);
        }

        // Add grid span classes for common patterns
        if (item.GridColumnSpan > 1)
        {
            classes.Add($"grid-col-span-{item.GridColumnSpan}");
        }

        if (item.GridRowSpan > 1)
        {
            classes.Add($"grid-row-span-{item.GridRowSpan}");
        }

        return string.Join(" ", classes);
    }

    private string GetGridItemStyle(PhotoSwipeItem item, int itemIndex)
    {
        var styles = new List<string>();

        // Apply CSS Grid properties directly if spanning is specified
        if (item.GridColumnSpan > 1)
        {
            styles.Add($"grid-column: span {item.GridColumnSpan}");
        }

        if (item.GridRowSpan > 1)
        {
            styles.Add($"grid-row: span {item.GridRowSpan}");
        }

        // Set height to auto for spanning items to allow proper grid sizing
        if (item.GridRowSpan > 1 || item.GridColumnSpan > 1)
        {
            styles.Add("--photoswipe-item-height: auto");
        }

        // Special handling for mixed layout galleries - first item gets spanned by CSS
        if (!string.IsNullOrEmpty(CssClass) && CssClass.Contains("pswp-gallery--mixed-layout") && itemIndex == 0)
        {
            styles.Add("--photoswipe-item-height: auto");
        }

        return string.Join("; ", styles);
    }

    private string GetLabelPositionClass(PhotoSwipeOverlayControl.OverlayPosition position)
    {
        return position switch
        {
            PhotoSwipeOverlayControl.OverlayPosition.TopLeft => "label-top-left",
            PhotoSwipeOverlayControl.OverlayPosition.TopRight => "label-top-right",
            PhotoSwipeOverlayControl.OverlayPosition.TopCenter => "label-top-center",
            PhotoSwipeOverlayControl.OverlayPosition.BottomLeft => "label-bottom-left",
            PhotoSwipeOverlayControl.OverlayPosition.BottomRight => "label-bottom-right",
            PhotoSwipeOverlayControl.OverlayPosition.BottomCenter => "label-bottom-center",
            PhotoSwipeOverlayControl.OverlayPosition.CenterLeft => "label-center-left",
            PhotoSwipeOverlayControl.OverlayPosition.CenterRight => "label-center-right",
            PhotoSwipeOverlayControl.OverlayPosition.Center => "label-center",
            _ => "label-top-right" // Default fallback
        };
    }

    // Load More Helper Methods
    private IEnumerable<PhotoSwipeItem> GetDisplayItems()
    {
        if (Items == null) return Enumerable.Empty<PhotoSwipeItem>();

        return Items.Take(_currentDisplayLimit);
    }

    private bool ShouldShowLoadMore()
    {
        return ItemLimit.HasValue && Items != null && Items.Count() > _currentDisplayLimit;
    }

    private int GetRemainingItemsCount()
    {
        if (Items == null) return 0;
        return Math.Max(0, Items.Count() - _currentDisplayLimit);
    }

    private async Task HandleLoadMore()
    {
        if (ShouldShowLoadMore())
        {
            _currentDisplayLimit = Math.Min(_currentDisplayLimit + LoadMoreIncrement, Items?.Count() ?? 0);

            if (OnLoadMore.HasDelegate)
            {
                await OnLoadMore.InvokeAsync();
            }

            StateHasChanged();

            // Refresh PhotoSwipe to include new items
            if (_interop != null && _instanceId != null)
            {
                await _interop.RefreshGalleryAsync(_instanceId);
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_interop != null && _instanceId != null)
        {
            await _interop.DestroyAsync(_instanceId);
        }

        if (_interop != null)
        {
            await _interop.DisposeAsync();
        }
    }
}