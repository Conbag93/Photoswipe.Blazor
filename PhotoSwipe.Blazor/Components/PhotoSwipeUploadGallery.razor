@using PhotoSwipe.Blazor.Models
@using PhotoSwipe.Blazor.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject ILogger<PhotoSwipeUploadGallery> Logger

<div class="photoswipe-upload-gallery @CssClass">

    <!-- Upload Area - Above Position -->
    @if (AllowAdd && UploadPosition == PhotoSwipeUploadPosition.Above)
    {
        <PhotoSwipeUploadArea Id="@($"{_galleryElementId}-upload-above")"
                            UploadMode="@UploadMode"
                            MaxFileSize="@MaxFileSize"
                            MaxFiles="@MaxFiles"
                            AllowMultipleFiles="@AllowMultipleFiles"
                            OnItemsUploaded="@OnUploadAreaItemsUploaded"
                            OnUploadModeChanged="@OnUploadAreaModeChanged"
                            OnUploadError="@OnUploadAreaError" />
    }

    <!-- Selection Controls -->
    @if (_combinedItems.Any() && EnableSelection)
    {
        <div class="selection-controls">
            @if (AllowMultiSelect)
            {
                <div class="mass-selection">
                    <button class="btn-select-all" @onclick="SelectAll">Select All</button>
                    <button class="btn-deselect-all" @onclick="DeselectAll">Deselect All</button>
                    @if (AllowDelete && _selectedItems.Any())
                    {
                        <button class="btn-delete-selected" @onclick="() => ShowDeleteConfirmation(_selectedItems.ToList())">Delete Selected (@_selectedItems.Count)</button>
                    }
                </div>
            }
        </div>
    }

    <!-- Gallery using PhotoSwipeGallery component -->
    <PhotoSwipeGallery Id="@_galleryElementId" 
                       Items="@_combinedItems" 
                       Options="@Options" 
                       CssClass="@($"upload-gallery-display {CssClass}")"
                       OnOpen="OnOpen" 
                       OnClose="OnClose" 
                       OnChange="OnChange">
        
        <ItemTemplate Context="item">
            <div class="gallery-item-wrapper">
                <!-- Selection Overlay with configurable position -->
                @if (EnableSelection)
                {
                    <PhotoSwipeOverlayControl Position="@SelectionPosition"
                                            ControlType="selection"
                                            PreventGallery="true">
                        @if (AllowMultiSelect)
                        {
                            <input type="checkbox"
                                   class="selection-checkbox"
                                   checked="@_selectedItems.Contains(item)"
                                   @onchange="@(e => ToggleSelection(item, (bool)e.Value!))" />
                        }
                        else
                        {
                            <input type="radio"
                                   class="selection-radio"
                                   name="single-select-@_galleryElementId"
                                   checked="@(SelectedItem == item)"
                                   @onchange="@(e => SelectSingle(item, !string.IsNullOrEmpty(e.Value?.ToString())))" />
                        }
                    </PhotoSwipeOverlayControl>
                }

                <!-- Delete Overlay using new PhotoSwipeOverlayControl -->
                @if (AllowDelete)
                {
                    <PhotoSwipeOverlayControl Position="PhotoSwipeOverlayControl.OverlayPosition.BottomRight"
                                            ControlType="delete"
                                            Icon="Ã—"
                                            Title="Delete this image"
                                            AriaLabel="Delete image"
                                            CssClass="delete-overlay-control"
                                            ButtonCssClass="size-delete btn-delete-item"
                                            OnClick="@(() => ShowDeleteConfirmation(new List<PhotoSwipeItem> { item }))" />
                }

                <!-- Reordering Controls -->
                @if (AllowReorder && ShowIndexLabels)
                {
                    <PhotoSwipeOverlayControl Position="PhotoSwipeOverlayControl.OverlayPosition.TopLeft"
                                            ControlType="index"
                                            Icon="@GetIndexLabel(item)"
                                            ButtonCssClass="index-label"
                                            Title="@GetIndexTooltip(item)"
                                            Disabled="true"
                                            SpacingIndex="0"
                                            Direction="PhotoSwipeOverlayControl.GrowDirection.Right"
                                            ControlGap="4" />
                }

                @if (AllowReorder)
                {
                    <!-- Up Arrow (Top-Right) -->
                    <PhotoSwipeOverlayControl Position="PhotoSwipeOverlayControl.OverlayPosition.TopRight"
                                            ControlType="reorder-up"
                                            Icon="@GetUpArrowSvg()"
                                            ButtonCssClass="@GetUpArrowButtonClass(item)"
                                            Title="@GetUpArrowTooltip(item)"
                                            OnClick="@(() => MoveItemUp(item))"
                                            Disabled="@IsUpArrowDisabled(item)"
                                            SpacingIndex="0"
                                            Direction="PhotoSwipeOverlayControl.GrowDirection.Left"
                                            ControlGap="4" />

                    <!-- Down Arrow (Bottom-Right) -->
                    <PhotoSwipeOverlayControl Position="PhotoSwipeOverlayControl.OverlayPosition.BottomRight"
                                            ControlType="reorder-down"
                                            Icon="@GetDownArrowSvg()"
                                            ButtonCssClass="@GetDownArrowButtonClass(item)"
                                            Title="@GetDownArrowTooltip(item)"
                                            OnClick="@(() => MoveItemDown(item))"
                                            Disabled="@IsDownArrowDisabled(item)"
                                            SpacingIndex="@(AllowDelete ? 1 : 0)"
                                            Direction="PhotoSwipeOverlayControl.GrowDirection.Left"
                                            ControlGap="4" />
                }

                <!-- Custom Overlay Controls (for user extensibility) -->
                @if (CustomOverlayControls != null)
                {
                    @CustomOverlayControls(item)
                }

                <!-- Item Content -->
                @if (ItemTemplate != null)
                {
                    @ItemTemplate(item)
                }
                else
                {
                    <img src="@item.ThumbnailUrl" alt="@item.Alt" class="gallery-image" />
                }
            </div>
        </ItemTemplate>
        
    </PhotoSwipeGallery>

    <!-- Upload Area - Below Position -->
    @if (AllowAdd && UploadPosition == PhotoSwipeUploadPosition.Below)
    {
        <PhotoSwipeUploadArea Id="@($"{_galleryElementId}-upload-below")"
                            UploadMode="@UploadMode"
                            MaxFileSize="@MaxFileSize"
                            MaxFiles="@MaxFiles"
                            AllowMultipleFiles="@AllowMultipleFiles"
                            OnItemsUploaded="@OnUploadAreaItemsUploaded"
                            OnUploadModeChanged="@OnUploadAreaModeChanged"
                            OnUploadError="@OnUploadAreaError" />
    }

    <!-- Empty State -->
    @if (!_combinedItems.Any())
    {
        <div class="empty-gallery">
            <p>No images in gallery.</p>
            @if (AllowAdd)
            {
                <p>Upload some images to get started!</p>
            }
        </div>
    }
    
    <!-- Delete Confirmation Modal -->
    @if (AllowDelete && _showDeleteConfirmation)
    {
        <div class="delete-confirmation-modal">
            <div class="modal-content">
                <h3>Confirm Delete</h3>
                <p>Are you sure you want to delete @(_itemsToDelete.Count == 1 ? "this image" : $"these {_itemsToDelete.Count} images")? This action cannot be undone.</p>
                <div class="modal-buttons">
                    <button class="btn-confirm-delete" @onclick="ConfirmDelete">Delete</button>
                    <button class="btn-cancel-delete" @onclick="CancelDelete">Cancel</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string? Id { get; set; }
    [Parameter] public string? CssClass { get; set; }
    [Parameter] public IEnumerable<PhotoSwipeItem>? Items { get; set; }
    [Parameter] public PhotoSwipeOptions? Options { get; set; }
    [Parameter] public RenderFragment<PhotoSwipeItem>? ItemTemplate { get; set; }
    [Parameter] public RenderFragment<PhotoSwipeItem>? CustomOverlayControls { get; set; }
    
    // Upload parameters
    [Parameter] public bool AllowAdd { get; set; } = true;
    [Parameter] public bool AllowDelete { get; set; } = false;
    [Parameter] public PhotoSwipeUploadMode UploadMode { get; set; } = PhotoSwipeUploadMode.Add;
    [Parameter] public PhotoSwipeUploadPosition UploadPosition { get; set; } = PhotoSwipeUploadPosition.Above;
    [Parameter] public long MaxFileSize { get; set; } = 10 * 1024 * 1024; // 10MB
    [Parameter] public int MaxFiles { get; set; } = 20;
    [Parameter] public bool AllowMultipleFiles { get; set; } = true;
    
    // Selection parameters
    [Parameter] public bool AllowMultiSelect { get; set; } = true;
    [Parameter] public PhotoSwipeItem? SelectedItem { get; set; }
    [Parameter] public IEnumerable<PhotoSwipeItem>? SelectedItems { get; set; }
    [Parameter] public bool EnableSelection { get; set; } = false;
    [Parameter] public PhotoSwipeOverlayControl.OverlayPosition SelectionPosition { get; set; } = PhotoSwipeOverlayControl.OverlayPosition.TopLeft;

    // Reordering parameters
    [Parameter] public bool AllowReorder { get; set; } = false;
    [Parameter] public bool ShowIndexLabels { get; set; } = true;
    
    // Events
    [Parameter] public EventCallback<PhotoSwipeEventArgs> OnOpen { get; set; }
    [Parameter] public EventCallback<PhotoSwipeEventArgs> OnClose { get; set; }
    [Parameter] public EventCallback<PhotoSwipeEventArgs> OnChange { get; set; }
    [Parameter] public EventCallback<PhotoSwipeItem> SelectedItemChanged { get; set; }
    [Parameter] public EventCallback<IEnumerable<PhotoSwipeItem>> SelectedItemsChanged { get; set; }
    [Parameter] public EventCallback<PhotoSwipeItem> OnItemDeleted { get; set; }
    [Parameter] public EventCallback<IEnumerable<PhotoSwipeItem>> OnItemsDeleted { get; set; }
    [Parameter] public EventCallback<IEnumerable<PhotoSwipeItem>> OnItemsUploaded { get; set; }
    [Parameter] public EventCallback<IEnumerable<PhotoSwipeItem>> OnItemsChanged { get; set; }
    [Parameter] public EventCallback<IEnumerable<PhotoSwipeItem>> OnItemsReordered { get; set; }

    private readonly List<PhotoSwipeItem> _originalItems = [];
    private readonly List<PhotoSwipeItem> _confirmedItems = [];
    private readonly List<PhotoSwipeItem> _selectedItems = [];

    private IEnumerable<PhotoSwipeItem> _combinedItems = [];
    private List<PhotoSwipeItem> _itemsToDelete = [];
    private bool _showDeleteConfirmation = false;
    
    // Store the gallery ElementId for consistent PhotoSwipe interop
    private string? _galleryElementId;

    protected override void OnInitialized()
    {
        // Generate a consistent ElementId for the PhotoSwipeGallery
        // This must be set before PhotoSwipeGallery.OnInitialized runs
        _galleryElementId = Id ?? $"photoswipe-upload-{Guid.NewGuid():N}";
        UpdateCombinedItems();
    }

    protected override void OnParametersSet()
    {
        // Store original items on first load or when Items changes externally
        // We need to detect if Items has changed from what we expect (original + confirmed)
        var expectedCombined = _originalItems.Concat(_confirmedItems).ToList();
        var currentItems = (Items ?? Enumerable.Empty<PhotoSwipeItem>()).ToList();

        // If Items doesn't match our expected combined items, it means Items was updated externally
        // or this is the first load, so we should update _originalItems
        if (!_originalItems.Any() || !currentItems.SequenceEqual(expectedCombined))
        {
            _originalItems.Clear();
            _originalItems.AddRange(currentItems.Except(_confirmedItems));
        }

        // Update selected items when parameters change
        if (SelectedItems != null)
        {
            _selectedItems.Clear();
            _selectedItems.AddRange(SelectedItems);
        }

        UpdateCombinedItems();
    }

    private void UpdateCombinedItems()
    {
        _combinedItems = UploadMode switch
        {
            PhotoSwipeUploadMode.Add => _originalItems.Concat(_confirmedItems),
            PhotoSwipeUploadMode.Replace => _confirmedItems.Any() ? _confirmedItems : _originalItems,
            _ => _originalItems
        };
    }

    // Event handlers for PhotoSwipeUploadArea
    private async Task OnUploadAreaItemsUploaded(IEnumerable<PhotoSwipeItem> uploadedItems)
    {
        if (UploadMode == PhotoSwipeUploadMode.Replace)
        {
            // Clear previous confirmed items for replace mode
            _confirmedItems.Clear();
        }

        _confirmedItems.AddRange(uploadedItems);
        UpdateCombinedItems();

        if (OnItemsUploaded.HasDelegate)
        {
            await OnItemsUploaded.InvokeAsync(uploadedItems);
        }

        if (OnItemsChanged.HasDelegate)
        {
            await OnItemsChanged.InvokeAsync(_combinedItems);
        }

        StateHasChanged();
        Logger.LogInformation("Confirmed upload of {ItemCount} items", uploadedItems.Count());
    }

    private async Task OnUploadAreaModeChanged(PhotoSwipeUploadMode mode)
    {
        UploadMode = mode;
        UpdateCombinedItems();
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task OnUploadAreaError(string error)
    {
        Logger.LogWarning("Upload error: {Error}", error);
        await Task.CompletedTask;
    }


    // Selection methods
    private async Task ToggleSelection(PhotoSwipeItem item, bool isSelected)
    {
        if (isSelected)
        {
            if (!_selectedItems.Contains(item))
            {
                _selectedItems.Add(item);
            }
        }
        else
        {
            _selectedItems.Remove(item);
        }

        if (SelectedItemsChanged.HasDelegate)
        {
            await SelectedItemsChanged.InvokeAsync(_selectedItems.ToList());
        }

        StateHasChanged();
    }

    private async Task SelectSingle(PhotoSwipeItem item, bool isSelected)
    {
        if (isSelected)
        {
            _selectedItems.Clear();
            _selectedItems.Add(item);
            
            if (SelectedItemChanged.HasDelegate)
            {
                await SelectedItemChanged.InvokeAsync(item);
            }
        }
        else if (_selectedItems.Contains(item))
        {
            _selectedItems.Remove(item);
            
            if (SelectedItemChanged.HasDelegate)
            {
                await SelectedItemChanged.InvokeAsync(null);
            }
        }

        StateHasChanged();
    }

    private async Task SelectAll()
    {
        _selectedItems.Clear();
        _selectedItems.AddRange(_combinedItems);
        
        if (SelectedItemsChanged.HasDelegate)
        {
            await SelectedItemsChanged.InvokeAsync(_selectedItems.ToList());
        }
        
        StateHasChanged();
    }

    private async Task DeselectAll()
    {
        _selectedItems.Clear();
        
        if (SelectedItemsChanged.HasDelegate)
        {
            await SelectedItemsChanged.InvokeAsync(_selectedItems.ToList());
        }
        
        StateHasChanged();
    }
    
    // Delete methods
    private void ShowDeleteConfirmation(List<PhotoSwipeItem> items)
    {
        _itemsToDelete = items;
        _showDeleteConfirmation = true;
        StateHasChanged();
    }
    
    private async Task ConfirmDelete()
    {
        try
        {
            // Remove from both original and confirmed items
            foreach (var item in _itemsToDelete)
            {
                _originalItems.Remove(item);
                _confirmedItems.Remove(item);
                _selectedItems.Remove(item);
            }
            
            UpdateCombinedItems();
            
            // Notify parent components
            if (_itemsToDelete.Count == 1 && OnItemDeleted.HasDelegate)
            {
                await OnItemDeleted.InvokeAsync(_itemsToDelete[0]);
            }
            else if (_itemsToDelete.Count > 1 && OnItemsDeleted.HasDelegate)
            {
                await OnItemsDeleted.InvokeAsync(_itemsToDelete);
            }
            
            // Update OnItemsChanged
            if (OnItemsChanged.HasDelegate)
            {
                await OnItemsChanged.InvokeAsync(_combinedItems);
            }
            
            Logger.LogInformation("Deleted {ItemCount} items", _itemsToDelete.Count);
            
            // Update selection events
            if (AllowMultiSelect && SelectedItemsChanged.HasDelegate)
            {
                await SelectedItemsChanged.InvokeAsync(_selectedItems.ToList());
            }
            
            if (!AllowMultiSelect && SelectedItemChanged.HasDelegate && _selectedItems.Count == 0)
            {
                await SelectedItemChanged.InvokeAsync(null);
            }
            
        }
        finally
        {
            _showDeleteConfirmation = false;
            _itemsToDelete.Clear();
            StateHasChanged();
        }
    }
    
    private void CancelDelete()
    {
        _showDeleteConfirmation = false;
        _itemsToDelete.Clear();
        StateHasChanged();
    }

    // Reordering methods
    private async Task MoveItemUp(PhotoSwipeItem item)
    {
        var items = _combinedItems.ToList();
        var currentIndex = items.FindIndex(i => i.Src == item.Src);
        if (currentIndex > 0)
        {
            // Swap with the item above
            (items[currentIndex], items[currentIndex - 1]) = (items[currentIndex - 1], items[currentIndex]);

            // Update original or confirmed items based on which collection the item belongs to
            UpdateItemCollections(items);

            // BUGFIX: Update _combinedItems directly to preserve the reordered sequence
            // Don't call UpdateCombinedItems() which would regenerate from original order
            _combinedItems = items;

            StateHasChanged();
            Logger.LogInformation("Image moved up: {Title} from position {OldPos} to {NewPos}",
                item.Title ?? item.Alt, currentIndex + 1, currentIndex);

            if (OnItemsReordered.HasDelegate)
            {
                await OnItemsReordered.InvokeAsync(items);
            }

            if (OnItemsChanged.HasDelegate)
            {
                await OnItemsChanged.InvokeAsync(items);
            }
        }
    }

    private async Task MoveItemDown(PhotoSwipeItem item)
    {
        var items = _combinedItems.ToList();
        var currentIndex = items.FindIndex(i => i.Src == item.Src);
        if (currentIndex < items.Count - 1)
        {
            // Swap with the item below
            (items[currentIndex], items[currentIndex + 1]) = (items[currentIndex + 1], items[currentIndex]);

            // Update original or confirmed items based on which collection the item belongs to
            UpdateItemCollections(items);

            // BUGFIX: Update _combinedItems directly to preserve the reordered sequence
            // Don't call UpdateCombinedItems() which would regenerate from original order
            _combinedItems = items;

            StateHasChanged();
            Logger.LogInformation("Image moved down: {Title} from position {OldPos} to {NewPos}",
                item.Title ?? item.Alt, currentIndex + 1, currentIndex + 2);

            if (OnItemsReordered.HasDelegate)
            {
                await OnItemsReordered.InvokeAsync(items);
            }

            if (OnItemsChanged.HasDelegate)
            {
                await OnItemsChanged.InvokeAsync(items);
            }
        }
    }

    private void UpdateItemCollections(List<PhotoSwipeItem> reorderedItems)
    {
        // BUGFIX: For reordering to work across collections, we need to treat all items as one unified collection
        // The original separation between _originalItems and _confirmedItems prevents cross-collection reordering

        if (UploadMode == PhotoSwipeUploadMode.Replace && _confirmedItems.Any())
        {
            // In replace mode with confirmed items, update confirmed items
            _confirmedItems.Clear();
            _confirmedItems.AddRange(reorderedItems);
        }
        else
        {
            // Instead of maintaining artificial separation, put all reordered items in _originalItems
            // and clear _confirmedItems, since the user has explicitly reordered them into a unified sequence
            _originalItems.Clear();
            _confirmedItems.Clear();

            _originalItems.AddRange(reorderedItems);
        }
    }

    // Reordering helper methods
    private string GetIndexLabel(PhotoSwipeItem item)
    {
        var items = _combinedItems.ToList();
        var currentIndex = items.FindIndex(i => i.Src == item.Src);
        return $"{currentIndex + 1}/{items.Count}";
    }

    private string GetIndexTooltip(PhotoSwipeItem item)
    {
        var items = _combinedItems.ToList();
        var currentIndex = items.FindIndex(i => i.Src == item.Src);
        return $"Image {currentIndex + 1} of {items.Count}";
    }

    private bool IsUpArrowDisabled(PhotoSwipeItem item)
    {
        var items = _combinedItems.ToList();
        var currentIndex = items.FindIndex(i => i.Src == item.Src);
        return currentIndex <= 0; // Disabled if first item
    }

    private bool IsDownArrowDisabled(PhotoSwipeItem item)
    {
        var items = _combinedItems.ToList();
        var currentIndex = items.FindIndex(i => i.Src == item.Src);
        return currentIndex >= items.Count - 1; // Disabled if last item
    }

    private string GetUpArrowButtonClass(PhotoSwipeItem item)
    {
        return $"reorder-button up-arrow {(IsUpArrowDisabled(item) ? "disabled" : "")}";
    }

    private string GetDownArrowButtonClass(PhotoSwipeItem item)
    {
        return $"reorder-button down-arrow {(IsDownArrowDisabled(item) ? "disabled" : "")}";
    }

    private string GetUpArrowTooltip(PhotoSwipeItem item)
    {
        return IsUpArrowDisabled(item) ? "Already first image" : "Move image up";
    }

    private string GetDownArrowTooltip(PhotoSwipeItem item)
    {
        return IsDownArrowDisabled(item) ? "Already last image" : "Move image down";
    }

    private string GetUpArrowSvg()
    {
        return @"<svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 640 640"">
                   <path d=""M342.6 81.4C330.1 68.9 309.8 68.9 297.3 81.4L137.3 241.4C124.8 253.9 124.8 274.2 137.3 286.7C149.8 299.2 170.1 299.2 182.6 286.7L288 181.3L288 552C288 569.7 302.3 584 320 584C337.7 584 352 569.7 352 552L352 181.3L457.4 286.7C469.9 299.2 490.2 299.2 502.7 286.7C515.2 274.2 515.2 253.9 502.7 241.4L342.7 81.4z"" fill=""currentColor""/>
                 </svg>";
    }

    private string GetDownArrowSvg()
    {
        return @"<svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 640 640"">
                   <path d=""M297.4 558.6C309.9 571.1 330.2 571.1 342.7 558.6L502.7 398.6C515.2 386.1 515.2 365.8 502.7 353.3C490.2 340.8 469.9 340.8 457.4 353.3L352 458.7L352 88C352 70.3 337.7 56 320 56C302.3 56 288 70.3 288 88L288 458.7L182.6 353.3C170.1 340.8 149.8 340.8 137.3 353.3C124.8 365.8 124.8 386.1 137.3 398.6L297.3 558.6z"" fill=""currentColor""/>
                 </svg>";
    }


    public async ValueTask DisposeAsync()
    {
        // Component cleanup if needed
        await Task.CompletedTask;
    }
}