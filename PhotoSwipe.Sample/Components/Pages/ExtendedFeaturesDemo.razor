@page "/extended-features-demo"
@using PhotoSwipe.Blazor.Components
@using PhotoSwipe.Blazor.Models
@rendermode InteractiveServer
@inject ILogger<ExtendedFeaturesDemo> Logger

<PageTitle>Extended Features Demo</PageTitle>

<div class="extended-demo-container">
    <div class="demo-header">
        <h1>üöÄ Extended Features Demo</h1>
        <p>This demo showcases the extended capabilities beyond basic PhotoSwipe: uploads, selection, deletion, and interactive workflows.</p>
    </div>

    <!-- Mode Controls -->
    <div class="mode-controls">
        <div class="control-group">
            <label>
                <strong>Gallery Mode:</strong>
            </label>
            <label class="radio-option">
                <input type="radio" name="readonly" checked="@(!_readOnlyMode)" @onchange="@(() => _readOnlyMode = false)" />
                Interactive
            </label>
            <label class="radio-option">
                <input type="radio" name="readonly" checked="@_readOnlyMode" @onchange="@(() => _readOnlyMode = true)" />
                Read-Only
            </label>
        </div>

        <div class="control-group">
            <label>
                <strong>Selection Mode:</strong>
            </label>
            <label class="radio-option">
                <input type="radio" name="selection" checked="@(_selectionMode == SelectionMode.None)" @onchange="@(() => _selectionMode = SelectionMode.None)" />
                None
            </label>
            <label class="radio-option">
                <input type="radio" name="selection" checked="@(_selectionMode == SelectionMode.Single)" @onchange="@(() => _selectionMode = SelectionMode.Single)" />
                Single
            </label>
            <label class="radio-option">
                <input type="radio" name="selection" checked="@(_selectionMode == SelectionMode.Multi)" @onchange="@(() => _selectionMode = SelectionMode.Multi)" />
                Multi
            </label>
        </div>

        <div class="control-group">
            <label>
                <strong>Uploads:</strong>
            </label>
            <label class="radio-option">
                <input type="checkbox" checked="@_allowUploads" @onchange="@((e) => _allowUploads = (bool)e.Value!)" />
                Enable Uploads
            </label>
        </div>

        @if (_allowUploads)
        {
            <div class="control-group">
                <label>
                    <strong>File Upload Mode:</strong>
                </label>
                <label class="radio-option">
                    <input type="radio" name="fileUploadMode" checked="@_allowMultipleFiles" @onchange="@(() => _allowMultipleFiles = true)" />
                    Multi-File Upload
                </label>
                <label class="radio-option">
                    <input type="radio" name="fileUploadMode" checked="@(!_allowMultipleFiles)" @onchange="@(() => _allowMultipleFiles = false)" />
                    Single File Upload
                </label>
            </div>
        }
    </div>

    <!-- Status Panel -->
    @if (_galleryItems.Any() || _selectedItems.Any())
    {
        <div class="status-panel">
            <div class="status-item">
                <span class="status-label">Total Images:</span>
                <span class="status-value">@_galleryItems.Count</span>
            </div>
            @if (_selectionMode != SelectionMode.None)
            {
                <div class="status-item">
                    <span class="status-label">Selected:</span>
                    <span class="status-value">@_selectedItems.Count</span>
                </div>
            }
            @if (_uploadedThisSession > 0)
            {
                <div class="status-item">
                    <span class="status-label">Uploaded:</span>
                    <span class="status-value">@_uploadedThisSession</span>
                </div>
            }
        </div>
    }

    <!-- Interactive Gallery -->
    <div class="gallery-section">
        <PhotoSwipeUploadGallery
            Id="extended-features-gallery"
            Items="@_galleryItems"
            ReadOnly="@_readOnlyMode"
            AllowUploads="@_allowUploads"
            AllowMultipleFiles="@_allowMultipleFiles"
            AllowMultiSelect="@(_selectionMode == SelectionMode.Multi)"
            SelectedItem="@(_selectionMode == SelectionMode.Single ? _selectedItems.FirstOrDefault() : null)"
            SelectedItems="@(_selectionMode == SelectionMode.Multi ? _selectedItems : null)"
            MaxFileSize="@(10 * 1024 * 1024)"
            MaxFiles="20"
            UploadMode="PhotoSwipeUploadMode.Add"
            OnItemsChanged="@OnGalleryChanged"
            OnItemsUploaded="@OnItemsUploaded"
            OnItemDeleted="@OnItemDeleted"
            OnItemsDeleted="@OnItemsDeleted"
            SelectedItemChanged="@OnSingleSelectionChanged"
            SelectedItemsChanged="@OnMultiSelectionChanged"
            Options="@_galleryOptions" />
    </div>

    <!-- Interactive Workflow Section -->
    @if (!_readOnlyMode && _allowUploads)
    {
        <div class="workflow-section">
            <h2>üìã Interactive Workflow</h2>
            <p>Demonstrate the complete workflow: Upload ‚Üí Preview ‚Üí Select ‚Üí Confirm/Delete</p>
            
            <div class="workflow-actions">
                <button class="btn-action" @onclick="AddSampleImages" disabled="@_readOnlyMode">
                    ‚ûï Add Sample Images
                </button>
                
                @if (_galleryItems.Any() && _selectionMode == SelectionMode.Multi)
                {
                    <button class="btn-action" @onclick="SelectRandomItems" disabled="@_readOnlyMode">
                        üé≤ Select Random Items
                    </button>
                    
                    @if (_selectedItems.Any())
                    {
                        <button class="btn-action btn-danger" @onclick="DeleteSelected" disabled="@_readOnlyMode">
                            üóëÔ∏è Delete Selected (@_selectedItems.Count)
                        </button>
                    }
                }
                
                @if (_galleryItems.Any())
                {
                    <button class="btn-action btn-secondary" @onclick="ClearGallery" disabled="@_readOnlyMode">
                        üßπ Clear Gallery
                    </button>
                }
            </div>
        </div>
    }

    <!-- Current Mode Display -->
    <div class="mode-display">
        <h3>Current Configuration:</h3>
        <ul>
            <li><strong>Gallery Mode:</strong> @(_readOnlyMode ? "Read-Only" : "Interactive")</li>
            <li><strong>Selection:</strong> @_selectionMode</li>
            <li><strong>Uploads:</strong> @(_allowUploads ? "Enabled" : "Disabled")</li>
            @if (_allowUploads)
            {
                <li><strong>File Upload Mode:</strong> @(_allowMultipleFiles ? "Multi-File" : "Single File")</li>
            }
            @if (_selectedItems.Any())
            {
                <li><strong>Selected Items:</strong> @string.Join(", ", _selectedItems.Take(3).Select(x => x.Alt ?? "Image")) @(_selectedItems.Count > 3 ? $" and {_selectedItems.Count - 3} more..." : "")</li>
            }
        </ul>
    </div>
</div>

@code {
    private enum SelectionMode { None, Single, Multi }

    // Mode states
    private bool _readOnlyMode = false;
    private SelectionMode _selectionMode = SelectionMode.None;
    private bool _allowUploads = true;
    private bool _allowMultipleFiles = true;

    // Gallery data
    private List<PhotoSwipeItem> _galleryItems = new();
    private List<PhotoSwipeItem> _selectedItems = new();
    private int _uploadedThisSession = 0;

    // PhotoSwipe options
    private readonly PhotoSwipeOptions _galleryOptions = new()
    {
        ShowHideAnimationType = "zoom",
        BackgroundOpacity = 0.85,
        ShowAnimationDuration = 350
    };

    protected override void OnInitialized()
    {
        // Start with some initial images
        InitializeGallery();
        Logger.LogInformation("Extended Features Demo initialized");
    }

    private void InitializeGallery()
    {
        _galleryItems = new List<PhotoSwipeItem>
        {
            new()
            {
                Src = "https://picsum.photos/id/1018/1200/800",
                ThumbnailUrl = "https://picsum.photos/id/1018/300/200",
                Width = 1200,
                Height = 800,
                Alt = "Mountain View",
                Caption = "Scenic mountain landscape",
                Title = "Mountain Peak"
            },
            new()
            {
                Src = "https://picsum.photos/id/1015/1200/900",
                ThumbnailUrl = "https://picsum.photos/id/1015/300/225",
                Width = 1200,
                Height = 900,
                Alt = "Ocean Waves",
                Caption = "Ocean waves at sunset",
                Title = "Peaceful Ocean"
            },
            new()
            {
                Src = "https://picsum.photos/id/1019/1200/700",
                ThumbnailUrl = "https://picsum.photos/id/1019/300/175",
                Width = 1200,
                Height = 700,
                Alt = "Forest Trail",
                Caption = "Path through the forest",
                Title = "Forest Walk"
            }
        };
    }

    // Event handlers
    private void OnGalleryChanged(IEnumerable<PhotoSwipeItem> items)
    {
        _galleryItems = items.ToList();
        // Clear selections when gallery changes
        _selectedItems.Clear();
        StateHasChanged();
    }

    private void OnItemsUploaded(IEnumerable<PhotoSwipeItem> items)
    {
        _uploadedThisSession += items.Count();
        Logger.LogInformation("Items uploaded: {Count}", items.Count());
        StateHasChanged();
    }

    private void OnItemDeleted(PhotoSwipeItem item)
    {
        _selectedItems.Remove(item);
        Logger.LogInformation("Item deleted: {Alt}", item.Alt);
    }

    private void OnItemsDeleted(IEnumerable<PhotoSwipeItem> items)
    {
        foreach (var item in items)
        {
            _selectedItems.Remove(item);
        }
        Logger.LogInformation("Items deleted: {Count}", items.Count());
    }

    private void OnSingleSelectionChanged(PhotoSwipeItem item)
    {
        _selectedItems.Clear();
        if (item != null)
        {
            _selectedItems.Add(item);
        }
        StateHasChanged();
    }

    private void OnMultiSelectionChanged(IEnumerable<PhotoSwipeItem> items)
    {
        _selectedItems = items.ToList();
        StateHasChanged();
    }

    // Interactive actions
    private void AddSampleImages()
    {
        var newImages = new[]
        {
            new PhotoSwipeItem
            {
                Src = $"https://picsum.photos/id/{Random.Shared.Next(1000, 1100)}/1200/800",
                ThumbnailUrl = $"https://picsum.photos/id/{Random.Shared.Next(1000, 1100)}/300/200",
                Width = 1200,
                Height = 800,
                Alt = $"Sample Image {DateTime.Now:HHmmss}",
                Caption = "Programmatically added sample",
                Title = "Added Sample"
            },
            new PhotoSwipeItem
            {
                Src = $"https://picsum.photos/id/{Random.Shared.Next(1000, 1100)}/1200/900",
                ThumbnailUrl = $"https://picsum.photos/id/{Random.Shared.Next(1000, 1100)}/300/225",
                Width = 1200,
                Height = 900,
                Alt = $"Another Sample {DateTime.Now:HHmmss}",
                Caption = "Another test image",
                Title = "Test Image"
            }
        };

        _galleryItems.AddRange(newImages);
        StateHasChanged();
    }

    private void SelectRandomItems()
    {
        if (_galleryItems.Count == 0) return;

        _selectedItems.Clear();
        var itemsToSelect = Random.Shared.Next(1, Math.Min(4, _galleryItems.Count + 1));
        var shuffled = _galleryItems.OrderBy(x => Random.Shared.Next()).Take(itemsToSelect);
        _selectedItems.AddRange(shuffled);
        StateHasChanged();
    }

    private void DeleteSelected()
    {
        if (!_selectedItems.Any()) return;
        
        foreach (var item in _selectedItems.ToList())
        {
            _galleryItems.Remove(item);
        }
        _selectedItems.Clear();
        StateHasChanged();
    }

    private void ClearGallery()
    {
        _galleryItems.Clear();
        _selectedItems.Clear();
        _uploadedThisSession = 0;
        StateHasChanged();
    }
}